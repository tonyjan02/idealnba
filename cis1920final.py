# -*- coding: utf-8 -*-
"""cis1920final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SFT5bkT0wKWPws-mtL8FytOXHpGj1zp0

## CIS 1920 Final Project

# Imports
"""

# importing necessary libraries
import pandas as pd
import seaborn as sns
import json
import unittest
from google.colab import drive

!apt update

#mounts google drive to import the kaggle.json file (kaggle requires login by drive or account)
from google.colab import drive
drive.mount('/content/drive')

# installing necessary module
!pip install kaggle

!mkdir ~/.kaggle

!cp /content/drive/MyDrive/kaggle.json ~/.kaggle/

# downloading specific dataset
!kaggle datasets download -d justinas/nba-players-data

#unzipping dataset
!unzip /content/nba-players-data.zip

"""# Data Cleaner Class"""

# Custom DataCleaner Class with dunder methods
class DataCleaner:
    def __init__(self, data):
        # initializes a DataCleaner object
        self.data = data
    
    def __len__(self):
        # returns the length of dataset, with the length being the number of rows
        return len(self.data)
    
    def __str__(self):
        # returns a summary of the datacleaner instance with the length included
        return f"DataCleaner instance with size {len(self)}"
    
    def clean(self):
        # cleans the dataset with respect to the one we are using: drops, replaces, and cleans values
        cleaned_data = self.data.drop(columns={"Unnamed: 0", "college"})
        cleaned_data = cleaned_data.dropna(axis=1)
        cleaned_data.loc[cleaned_data["draft_round"] == "Undrafted", "draft_round"] = 3
        cleaned_data.loc[cleaned_data["draft_number"] == "Undrafted", "draft_number"] = 60
        cleaned_data["draft_round"] = cleaned_data["draft_round"].astype(int)
        cleaned_data["draft_number"] = cleaned_data["draft_number"].astype(int)
        self.data = cleaned_data
        return DataCleaner(cleaned_data)

"""# Cleaning + Pre-processing"""

# reading in file from kaggle to a dataframe
players_df = pd.read_csv("all_seasons.csv")
players_df

# looking at columns to learn which ones to drop
players_df.columns

# creating a DataCleaner instance and cleaning the dataset
players_cleaned_df = DataCleaner(players_df)
players_cleaned_df = players_cleaned_df.clean()
len(players_cleaned_df)

# checking to see that method has properly worked, getting summary of instance
str(players_cleaned_df)

# looking at datatypes of columns to see which ones need to be modified for EDA
players_cleaned_df.data.dtypes

"""# Testing to Verify Success of Pre-processing"""

# Creating test class with cases
class Test(unittest.TestCase):

    def test_datatypes(self):
        # tests if draft column types were converted corretly
        self.assertEquals(players_cleaned_df.data["draft_number"].dtype, int)
        self.assertEquals(players_cleaned_df.data["draft_round"].dtype, int)

    def test_no_undrafted(self):
        # tests to check that there are no "Undrafted" values and that the values were successfully replaced
        self.assertEquals(len(players_cleaned_df.data[players_cleaned_df.data["draft_number"] == "Undrafted"]), 0)
        self.assertEquals(len(players_cleaned_df.data[players_cleaned_df.data["draft_round"] == "Undrafted"]), 0)

# running test cases
if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)

"""# Checking for Relevant Information"""

# creates and displays correlation matrix
corr_matrix = players_cleaned_df.data.corr()
corr_matrix

"""# Displaying Findings"""

# creates and displays heatmap for dataset
heatmap = sns.heatmap(data = corr_matrix, cmap = "RdBu", vmin = -1, vmax = 1)
heatmap

# creates historgram plot to look at player height distributions 
plot_height = sns.histplot(players_cleaned_df.data[["player_height"]]).set(title = "Player Height Distributions")

# creates historgram plot to look at player weight distributions 
plot_weight = sns.histplot(players_cleaned_df.data[["player_weight"]]).set(title = "Player Weight Distributions")

# displays data after processing and cleaning
players_cleaned_df.data

# graphing draft number vs. points
draft_points_plot = sns.jointplot(x=players_cleaned_df.data["draft_number"], y=players_cleaned_df.data["pts"], kind="hex", color="#4CB391")

# graphing height vs. points
height_points_plot = sns.jointplot(x=players_cleaned_df.data["player_height"], y=players_cleaned_df.data["pts"], kind="hex", color="#4CB391")

# graphing weight vs. points
weight_points_plot = sns.jointplot(x=players_cleaned_df.data["player_weight"], y=players_cleaned_df.data["pts"], kind="hex", color="#4CB391")